{
    "docs": [
        {
            "location": "/", 
            "text": "Purpose\n\n\nOften one or more github repos and google docs repositories are used in a single github project.   For example:  Front end and back end.  In addition multiple public or private share for binary documents are also used.    This project will serves as a wrapper for both of those conepts as well as being a single repository for documentation.\n\n\nThis project uses mkdocs to provide an simple platform to generate html pages from markdown.   It can be hosted anywhere, includes special provisions for ghpages or can be run locally with \nmkdocs serve\n\n\nTopcoder Theme\n\n\nThis repository uses a third party theme called \ncinder\n.   However this theme has been forked and added the topcoder logo \n.   It would be easy enough to include this forked code directly in the tcProjWrapper repo directly, except this project relies heavily on  submodule for src so we wanted to include the theme as a submodule too.  In addition the submodule could be forked or branched specifly to include a customers logo.\n\n\nTopcoder Docs\n\n\nSince this project also contains content,  We can include standard docs like bug bash instructions.\n\n\nDeploying this template as a project\n\n\nOnce you clone this project with \ngit clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject\n you can then run \nsh bin/setup.sh\n and you will be prompted for the new project name.   This script will remove the git reference to this repo and do a fresh \ngit init\n\nThis file is the index.md in the docs directory.    Edit this file and describe the top level of your project. Also be sure to exit the mkdocs.yml file lines 9-11\n\n\n9  - tcProjWrapper:\n10    - 'This Project introduction': index.md\n11    - mkdocs: mkDocsIndex.md\n\n\n\n\nQuick Start\n\n\n\n\nMake sure you have python2 and pip2 installed, then run \npip2 install mkdocs\n to install mkdocs\n\n\nclone the template \ngit clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject\n\n\ncd \nmyproject\n and run  \nmkdocs serve\n\n\nYou should also edit the mkdocs.yml and edit the sitename.   It might be a good idea to remove the .git dir and do a \ngit init\n to orphan this template(repo) from your new wrapper project.", 
            "title": "This Project introduction"
        }, 
        {
            "location": "/#purpose", 
            "text": "Often one or more github repos and google docs repositories are used in a single github project.   For example:  Front end and back end.  In addition multiple public or private share for binary documents are also used.    This project will serves as a wrapper for both of those conepts as well as being a single repository for documentation.  This project uses mkdocs to provide an simple platform to generate html pages from markdown.   It can be hosted anywhere, includes special provisions for ghpages or can be run locally with  mkdocs serve", 
            "title": "Purpose"
        }, 
        {
            "location": "/#topcoder-theme", 
            "text": "This repository uses a third party theme called  cinder .   However this theme has been forked and added the topcoder logo  .   It would be easy enough to include this forked code directly in the tcProjWrapper repo directly, except this project relies heavily on  submodule for src so we wanted to include the theme as a submodule too.  In addition the submodule could be forked or branched specifly to include a customers logo.", 
            "title": "Topcoder Theme"
        }, 
        {
            "location": "/#topcoder-docs", 
            "text": "Since this project also contains content,  We can include standard docs like bug bash instructions.", 
            "title": "Topcoder Docs"
        }, 
        {
            "location": "/#deploying-this-template-as-a-project", 
            "text": "Once you clone this project with  git clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject  you can then run  sh bin/setup.sh  and you will be prompted for the new project name.   This script will remove the git reference to this repo and do a fresh  git init \nThis file is the index.md in the docs directory.    Edit this file and describe the top level of your project. Also be sure to exit the mkdocs.yml file lines 9-11  9  - tcProjWrapper:\n10    - 'This Project introduction': index.md\n11    - mkdocs: mkDocsIndex.md", 
            "title": "Deploying this template as a project"
        }, 
        {
            "location": "/#quick-start", 
            "text": "Make sure you have python2 and pip2 installed, then run  pip2 install mkdocs  to install mkdocs  clone the template  git clone --recursive git@github.com:topcoderinc/tcProjWrapper.git  myproject  cd  myproject  and run   mkdocs serve  You should also edit the mkdocs.yml and edit the sitename.   It might be a good idea to remove the .git dir and do a  git init  to orphan this template(repo) from your new wrapper project.", 
            "title": "Quick Start"
        }, 
        {
            "location": "/mkDocsIndex/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "mkdocs"
        }, 
        {
            "location": "/mkDocsIndex/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/mkDocsIndex/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/mkDocsIndex/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/project/", 
            "text": "Placeholder to project docs\n\n\nTODO\n\n\n\n\n[ ] subdocs\n\n\n[ ] binary docs\n\n\n[ ] ghpages", 
            "title": "Project"
        }, 
        {
            "location": "/project/#todo", 
            "text": "[ ] subdocs  [ ] binary docs  [ ] ghpages", 
            "title": "TODO"
        }, 
        {
            "location": "/Standards/ECS Deploy/", 
            "text": "ECS Deploy Standard\n\n\nStandards for Deploying ECS Applications on AWS\n\n\nOverview\n\n\nWhere possible, software deployments to AWS should use ECS (over EBS or stand alone servers). Rationalle:\n\n\n\n\nScaling\n\n\nLoad Balancing\n\n\nFull control over resources created (especially as comparred to EBS)\n\n\nThis prevents new, unneeded resources from being created on AWS\n\n\n\n\n\n\n\n\nDeployment Strategy\n\n\nThe AWS environment and VPC are setup in advance to accomidate EC2 deployments. This means the following resources are already in place and do not need to be created when a new application is deployed:\n\n\n\n\nNetwork Subnets\n\n\nSecurity Groups\n\n\nLoad balancers\n\n\n\n\nThe following resoures will be automatically created for each new application deployed to ECS:\n\n\n\n\nAn Autoscaling Group\n\n\nA Launch Configuration\n\n\nECS Resources\n\n\nA Cluster\n\n\nA Repository\n\n\nA Task Definition\n\n\nA Service\n\n\n\n\n\n\n\n\nProduction Deployments on AWS East\n\n\ndsds\n\n\nThing 2\n\n\nsasasa\n\n\nThing 2\n\n\nsasasa\n\n\nThing 2\n\n\nsasasa\n\n\nThing 2\n\n\nsasasa", 
            "title": "ECS Deploy Standard"
        }, 
        {
            "location": "/Standards/ECS Deploy/#ecs-deploy-standard", 
            "text": "Standards for Deploying ECS Applications on AWS", 
            "title": "ECS Deploy Standard"
        }, 
        {
            "location": "/Standards/ECS Deploy/#overview", 
            "text": "Where possible, software deployments to AWS should use ECS (over EBS or stand alone servers). Rationalle:   Scaling  Load Balancing  Full control over resources created (especially as comparred to EBS)  This prevents new, unneeded resources from being created on AWS", 
            "title": "Overview"
        }, 
        {
            "location": "/Standards/ECS Deploy/#deployment-strategy", 
            "text": "The AWS environment and VPC are setup in advance to accomidate EC2 deployments. This means the following resources are already in place and do not need to be created when a new application is deployed:   Network Subnets  Security Groups  Load balancers   The following resoures will be automatically created for each new application deployed to ECS:   An Autoscaling Group  A Launch Configuration  ECS Resources  A Cluster  A Repository  A Task Definition  A Service", 
            "title": "Deployment Strategy"
        }, 
        {
            "location": "/Standards/ECS Deploy/#production-deployments-on-aws-east", 
            "text": "dsds", 
            "title": "Production Deployments on AWS East"
        }, 
        {
            "location": "/Standards/ECS Deploy/#thing-2", 
            "text": "sasasa", 
            "title": "Thing 2"
        }, 
        {
            "location": "/Standards/ECS Deploy/#thing-2_1", 
            "text": "sasasa", 
            "title": "Thing 2"
        }, 
        {
            "location": "/Standards/ECS Deploy/#thing-2_2", 
            "text": "sasasa", 
            "title": "Thing 2"
        }, 
        {
            "location": "/Standards/ECS Deploy/#thing-2_3", 
            "text": "sasasa", 
            "title": "Thing 2"
        }
    ]
}